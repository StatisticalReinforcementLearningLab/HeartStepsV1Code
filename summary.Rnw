\documentclass[11pt]{article}
\usepackage[T1]{fontenc}
\usepackage[margin=1in]{geometry}
\usepackage{microtype}
\usepackage{booktabs}
\usepackage{enumitem}
\usepackage{setspace}
\usepackage{ragged2e,array}
\usepackage{hyperref}
\usepackage[capitalize]{cleveref}
\usepackage{graphicx}
\IfFileExists{MinionPro.sty}
  {\usepackage[mathlf,italicgreek,loosequotes]{MinionPro}
   \DisableLigatures[T]{encoding={OT1,T1}}
   \usepackage[toc,enum,bib,lineno,eqno]{tabfigures}}
  {\usepackage{times}
   \let\figureversion\@gobble
   \IfFileExists{mtpro2.sty}
     {\let\Bbbk\relax\usepackage[mtphrb]{mtpro2}}
     {\usepackage{mathptmx}}}
% environment hooks
\usepackage{etoolbox}

% make smallcaps/figures searchable
\input{glyphtounicode}
\pdfgentounicode=1

% correct Acrobat distortion with opacity
\pdfpageattr{/Group <</S /Transparency /I true /CS /DeviceRGB>>}

\hypersetup{breaklinks,colorlinks,allcolors=blue,pdfpagemode=UseNone}

\BeforeBeginEnvironment{tabular}{\begin{center}\figureversion{lf,tab}}
\AfterEndEnvironment{tabular}{\end{center}}
\AtBeginEnvironment{tabular}{\small\hyphenpenalty=10000}
\AtBeginEnvironment{tikzpicture}{%
  \figureversion{lf,tab}\small\hyphenpenalty=10000}

\newcolumntype{L}[1]{>{\RaggedRight\hspace{0pt}}p{#1}}
\newcolumntype{R}[1]{>{\RaggedLeft\hspace{0pt}}p{#1}}
\setlength{\tabcolsep}{6pt}

\setlist{leftmargin=\parindent,rightmargin=\parindent}

\DeclareMathOperator{\uniform}{Uniform}

\linespread{1.125}
\raggedbottom
\allowdisplaybreaks
\columnsep=1em

% R code "chunk" format:
% <<chunk options>>= R code @
% see http://yihui.name/knitr/options/#chunk{\_}options for chunk options

\title{\bfseries HeartSteps data summary}
\author{}
\date{\vskip -2em\normalsize\today}

\begin{document}
\maketitle
\thispagestyle{empty}

<<setup, include=FALSE, cache=FALSE>>=
opts_chunk$set(fig.align="center", dev="tikz", dev.args=list(pointsize=11), echo=FALSE, fig.width=6.5, fig.show="hold", par=TRUE)
knit_hooks$set(par=function(before, options, envir){
  if (before && options$fig.show!="none")
    par(mar=c(3, 3, 1, 0) + 0.5, mgp=c(2, 0.5, 0), oma=rep(0, 4), las=1, tcl=0.25)})
knit_hooks$set(inline = function(x){if (is.numeric(x)) round(x, 2) else x})
@

<<data, echo=FALSE, include=FALSE>>=
source("init.R")
setwd(sys.var$mbox.data)
load("csv.RData")
load("analysis.RData")
setwd(sys.var$repo)
color <- "chartreuse"
color.name <- "green"
@

\section{Data irregularities}

\subsection{EMA and momentary decision identifiers}
\label{sec:id}

The contextID variable was intended to uniquely identify each EMA notification and link between the EMA-related tables. However the contextID in EMA{\_}Context{\_}Notified does not represent all of the identifier values encountered in the remaining tables. Moreover different contextIDs are associated with responses within the same EMA. The reason for the former issue is described in \cref{sec:context}. More investigation is needed to determine the cause of the latter problem.

The decisionID variable was intended to uniquely identify each decision point in Momentary{\_}Decision and link to the suggestion response in the Response table. However the decisionID value is sometimes re-used for subsequent decision points, and these recurrences appear in slightly different ways between Momentary{\_}Decision and Response. This particular issue is due to a race condition in which the decisionID value stored on the phone is read before being updated.

Although relatively infrequent, these problems do not arise in a predictable manner and prevent systematic linkage between tables. We instead construct identifiers with userID and date-time variables, accounting for time lags for activity recognition and user response.

\subsection{Duplication}
\label{sec:dup}

Duplicate entries arise according to various identifiers available from the data. The overall number of unanticipated duplicates is small, but prevents consistent linkage between tables. We resolve duplication according to the rules below.

\begin{tabular}{L{0.225\textwidth}L{0.275\textwidth}L{0.4\textwidth}}
\toprule
Table & Source of duplication & Resolution \\
\midrule
EMA{\_}Context{\_}Engaged & Multiple activity recognition attempts & Discard duplicates with invalid activity recognition \\
\midrule
Structured{\_}Planning, Unstructured{\_}Planning & User revisited screen & Discard earlier or next-day duplicate plans \\
\midrule
EMA{\_}Response & User revisited screen & Discard earlier duplicate responses \\
\midrule
EMA{\_}Completed & Unknown & Due to additional issues (see \cref{sec:complete}), use table only for time zone information \\
\midrule
Momentary{\_}Decision & Time zone bugs (see \cref{sec:slot}) and other unknown reasons & Keep decisions that correctly link to Response, have a response, have the lowest time slot discrepancy, or are based on prefetch data. \\
\bottomrule
\end{tabular}

\subsection{Inactive server-phone connection}

The anticipated data for each user-designated notification time slot is sometimes entirely missing. For example at the EMA notification time slot for a given user, we might find no corresponding records in the EMA-related tables. This presumably arises when the user's phone is turned off or has no network access over extended periods of time.

Instances where no EMA-related records could be retrieved by user and day on study are depicted below.
<<inactive-ema, fig.height=3>>=
with(daily, plot(NULL, xlim = c(0, max(study.day)), ylim = c(0, max(user.index)),
                 frame.plot = FALSE, xlab = "Study day", ylab = "User index"))
with(daily, segments(0, user.index, pmax(study.day), col = "grey"))
with(subset(daily, !connect),
     points(study.day, user.index, pch = 20, col = "darkgrey"))
@
We can similarly depict the momentary decision points at which there are no records in Momentary{\_}Decision or Response.
<<inactive, fig.height=3>>=
with(suggest, plot(NULL, xlim = c(0, max(index)), ylim = c(0, max(user.index)),
                   frame.plot = FALSE, xlab = "Momentary decision index",
                   ylab = "User index"))
with(suggest, segments(0, user.index, pmax(index), col = "grey"))
with(subset(suggest, !connect),
     points(index, user.index, pch = 20, col = grey(0.2, alpha = 0.3)))
@
To address this issue, we could consider the user unavailable for the planning and activity suggestion interventions whenever an active connection is not apparent. For analysis, we still require the time of the EMA notifications and momentary decisions that would have otherwise occurred had the user's phone been connected. This can be inferred from the user-designated notification time slots in User{\_}Decision{\_}Times. In evaluating the decision time, we account for the fact that the user can change the slots at any point and (for simplicity) use the time zone recorded at the last connection.

\subsection{Notifications under changing time zone}
\label{sec:slot}

Prior to November notifications were sent according to the time zone at which the phone was last restarted, irrespective of the actual time zone. From November onward, notifications are sent under the actual time zone, irrespective of the notification history. So users who travel potentially receive notifications outside their designated time slots or repeated notifications in the same time slot. 

Instances where the momentary decision took place outside the designated time slot are depicted below, where darker points coincide with larger differences between the intended and actual time slots. In evaluating this discrepancy, we account for the 30-minute time lag that arises when the decision is based on prefetch data.
<<slot, fig.height=3>>=
with(suggest, plot(NULL, xlim = c(0, max(index)), ylim = c(0, max(user.index)),
                   frame.plot = FALSE, xlab = "Momentary decision index",
                   ylab = "User index"))
with(subset(suggest, slot != time.stamp.slot),
     points(index, user.index, pch = 20,
            col = rev(grey.colors(4))[abs(slot - time.stamp.slot)]))
d <- sapply(unique(suggest$user),
            function(u) with(subset(suggest, user == u),
                             table(slot != time.stamp.slot)), simplify = FALSE)
d <- do.call("c", lapply(d, function(x) x[1] / sum(x)))
@
The proportion of within-slot decisions among the users has an average of $\Sexpr{mean(d)}$ and range $\Sexpr{min(d)}$--$\Sexpr{max(d)}$. Because the discrepancy from the designated time slots tends to be small and infrequent, we propose simply indexing decisions as they arise; any variables representing calendar time (e.g. time of day) could be evaluated from the actual local time, rather than the intended time slot. Multiple decisions in the same time slot are handled as described in \cref{sec:dup}. Among these there are only $\Sexpr{with(dup.decision, nrow(subset(data, dup & link)))}$ instances where the user actually received more than one suggestion notification within the same slot.

\subsection{Randomized suggestion status}

The Momentary{\_}Decision table provides a variable Notify that indicates both availability (on the basis of Recognized{\_}Activity and Snooze{\_}Status) and randomization to send a suggestion (Is{\_}Randomized). However whenever the decision is made using prefetch data, Notify defaults to TRUE. To recover the actual Notify value for prefetch decisions, we look to the Is{\_}Randomized, Recognized{\_}Activity and Snooze{\_}Status. Comparing this with the Response table, which captures suggestion non-response, we obtain the cross-tabulation:

<<suggest, results="asis">>=
d <- with(suggest, table(!intransit & !snooze.status & is.randomized,
                         !is.na(response), useNA = "ifany"))
rownames(d) <- c("Don't send", "Send", "Disconnected")
colnames(d) <- c("No", "Yes")
d <- rbind(cbind(c("", "Momentary{\\_}Decision", rep("", nrow(d) - 1)),
                 c("Record in Response?", rownames(d)),
                 rbind(colnames(d), d)),
           c("", "Total", apply(d, 2, sum)))
rownames(d) <- NULL
print(xtable(d, digits = 0, align = rep("r", ncol(d) + 1)),
      floating = FALSE, booktabs = TRUE, hline.after = c(-1, 1, -1:0 + nrow(d)),
      include.rownames = FALSE, include.colnames = FALSE,
      sanitize.text.function = identity)
d <- aggregate(cbind(miss = is.na(response) & send, total = send) ~ user,
               data = subset(suggest, connect), sum)
@

In $\Sexpr{with(suggest, sum(!is.na(response) & (intransit | snooze.status), na.rm = TRUE))}$ cases the decision was ``don't send'' due to unavailability, but a suggestion was sent anyway; this is due to a race condition in which the Momentary{\_}Decision status stored on the phone is read before being updated, so the decision carried out reflects the prefetch availability status. This erroneous use of prefetch data is limited to about $\Sexpr{with(dup.decision, with(data, sum(dup & !is.prefetch)))}$ decision points.

A more common issue, arising in $617$ cases, is the decision result ``send,'' but no corresponding record is found in Response. The proportion of missing records per user is on average $0.23$ and has range $0.02$--$0.69$. We conjecture that the underlying problem is due (in part) to the user touching the notification (which opens the HeartSteps app), providing a response, viewing recent apps, and swiping HeartSteps away; the swiping action prevents submission of the response data to the server.

This data loss limits any reliable analysis of the message responses (e.g. ``good,'' ``bad,'' ``snooze''). However we can reasonably examine the effect of suggestions, provided that we expand the definition of unavailability to include no connection. So for the $\Sexpr{with(suggest, sum(is.na(notify)))}$ decision points with no data in both Momentary{\_}Decision and Response (and thus presumably no connection), we would consider the corresponding users to be unavailable for the intervention.

<<suggest-avail, results="asis">>=
d <- with(suggest,
          table(avail + 2*snooze.status + 3*(!snooze.status & intransit),
                !is.na(response) | (!intransit & !snooze.status & is.randomized),
                useNA = "ifany"))
rownames(d) <- c("Available", "Snooze enabled", "Snooze disabled, in transit",
                 "Disconnected")
colnames(d) <- c("Don't send", "Send or responded", "Disconnected")
print(xtable(d, digits = 0, align = rep("r", ncol(d) + 1)),
      floating = FALSE, booktabs = TRUE, sanitize.text.function = identity)
@

The proportion of decisions with Is{\_}Randomized equal to TRUE is $\Sexpr{with(suggest, sum(is.randomized[connect])/sum(connect))}$, which is close to the expected $60\%$. Under availability and an active connection, the proportion with ``send'' decision result or suggestion response is also close to the anticipated $60\%$, at $\Sexpr{with(subset(suggest, connect), sum((!intransit & !snooze.status & is.randomized) | !is.na(response))/sum(!intransit & !snooze.status))}$.

\subsection{Randomized planning status}

EMA{\_}Context{\_}Notified provides the randomized planning status Planning{\_}Today, but the values recorded in this table often do not agree with the administered planning level apparent from the in the Structured{\_}Planning and Unstructured{\_}Planning tables. This discrepancy is due to a race condition in which the the value of Planning{\_}Today stored on the phone is read before being updated. So its value might represent either an initial or previous status value. 

<<plan, results="asis">>=
d <- with(daily, table(capitalize(planning.today), capitalize(planning),
                       useNA = "ifany"))
rownames(d)[nrow(d)] <- colnames(d)[ncol(d)] <- "Unknown"
d <- rbind(cbind(c("", "Planning{\\_}Today", rep("", nrow(d) - 1)),
                 c("", rownames(d)), rbind(colnames(d), d)),
           c("", "Total", apply(d, 2, sum)))
rownames(d) <- NULL
cm <- paste0("& & \\multicolumn{", ncol(d) - 2, "}{c}{",
             "Structured{\\_}Planning, Unstructured{\\_}Planning,",
             " EMA{\\_}Response}\\\\ \n", "\\cmidrule{3-", ncol(d), "}\n")
print(xtable(d, digits = 0, align = rep("r", ncol(d) + 1)),
      floating = FALSE, booktabs = TRUE, hline.after = -1:0 + nrow(d),
      include.rownames = FALSE, include.colnames = FALSE,
      add.to.row = list(pos = as.list(-1:1),
                        command = c("\\toprule\n", cm, "\\midrule\n")),
      sanitize.text.function = identity)
@

We conjecture that the issue does not affect the actual, administered level of planning in Structured{\_}Planning and Unstructured{\_}Planning. However for the $\Sexpr{with(daily, sum(is.element(planning, c(NA, "disconnected"))))}$ EMAs that have no corresponding record in Structured{\_}Planning, Unstructured{\_}Planning or EMA{\_}Response, we do not know the randomized planning status. This number can be broken down into three settings:

\begin{itemize}
\item $\Sexpr{with(daily, sum(!connect))}$ cases where the user's phone had no active connection. We could consider the user unavailable for the planning intervention.
\item $\Sexpr{with(daily, sum(connect & !view & !respond))}$ cases where the user had an active connection, but probably did not view the questionnaire. We could simply regenerate the randomized planning status.
\item $\Sexpr{with(daily, sum(view & !respond))}$ cases where we know that the user engaged with the questionnaire, but did not respond. Based on the way in which the application captures EMA engagement, the randomized planning status is most likely ``no planning.''
\end{itemize}

\subsection{EMA question set}

The EMA{\_}Context{\_}Notified table contains a variable EMA{\_}Set{\_}Today, which should provide the ordered set of EMA questions sent to the user. In $\Sexpr{with(notify, sum(ema.set.today != ema.set, na.rm = TRUE))}$ cases EMA{\_}Set{\_}Today does not agree with the sequence of EMA answers that we can assemble from EMA{\_}Response. This is due to a race condition in which the value of EMA{\_}Set{\_}Today stored on the phone is read before being updated. To resolve the issue, we infer the administered question set from EMA{\_}Response; the question set for incomplete EMAs is not entirely recoverable, particularly if the user engaged with the EMA.

\subsection{Missing EMA context}
\label{sec:context}

A total of $\Sexpr{with(daily, sum(is.na(context.utime) & !is.na(ema.set.length)))}$ EMA responses have no contextual data available from notification or engagement. This was due to server-side dispensing of records for which the activity could not be recognized---a bug that was identified and patched in September.

\subsection{EMA completion status}
\label{sec:complete}

The EMA{\_}Completed table was intended to provide the EMA completion status, but it is not always in agreement with the data available in EMA{\_}Response. The reason for this is unclear, but we address the discrepancy by inferring completion status from EMA{\_}Response. Below we tabulate completion status by the number of EMA answers available for each contextID encountered in either table.

<<complete, results="asis">>=
d <- merge(aggregate(completed ~ contextid, any, data = complete),
           subset(ema, order == 1), by = "contextid", all = TRUE)
d$ema.set.length[is.na(d$ema.set.length)] <- 0
d <- with(d, table(completed, ema.set.length, useNA = "ifany"))
d <- rbind(as.numeric(colnames(d)), d)
rownames(d) <- c("Number of answers", "Incomplete", "Complete")
print(xtable(d, digits = 0),
      floating = FALSE, booktabs = TRUE, include.colnames = FALSE,
      hline.after = c(-1, 1, nrow(d)))
@

\subsection{Suggestion message tags and strings}

None of the activity suggestion messages were stored with the tags representing the tailoring of the message content to the user's context. To address this we apply all relevant tags post-hoc, using the curated list of suggestion messages. Note that all relevant tags are not necessarily the same tags that influenced the message selection. Moreover the list gives the message strings as-displayed with non-ASCII characters. Internally HeartSteps strips ASCII characters from messages before saving them to the datastore, but this operation is not performed consistently. To enable correct linkage, we strip all message strings of escape codes, punctuation, non-ASCII characters and normalize whitespace.

\section{User characteristics}

Here is a summary of the intake information available for $\Sexpr{nrow(intake)}$ users.

<<users, results="asis">>=
d <- with(users,
          cbind("Male" = gender == "male",
                "Age under 25" = age < 25,
                "White" = ethnicity == "white/caucasian",
                "Graduate school" = edu %in% c("grad degree", "grad school"),
                "Married or common-law" = marital %in%
                              c("married", "domestic partnership"),
                "Any children" = children > 0,
                "Used fitness app" = fitapp == "yes",
                "Used activity tracker" = tracker == "yes"))
d <- cbind(apply(d, 2, sum, na.rm = TRUE),
           apply(d, 2, sum, na.rm = TRUE)
           / sum(!apply(d, 1, function(x) any(is.na(x)))) * 100)
colnames(d) <- c("Number", "Percent")
print(xtable(d, digits = c(0, 0, 1)), floating = FALSE, booktabs = TRUE)
@

\section{EMAs}

\subsection{Hecticness}

At each EMA, the user was asked ``How hectic was your day today?'' A $\Sexpr{length(ema1)}$-point scale was provided, with $\Sexpr{ema1[1]}$ labelled as ``\Sexpr{names(ema1[1])}'' and $\Sexpr{length(ema1)}$ labelled as ``\Sexpr{names(rev(ema1)[1])}.''  Here we depict the responses over time, where darker points correspond to more hectic days. No point is plotted if the response is unavailable, due to either non- or pending response.
<<ema1, fig.height=3>>=
with(daily, plot(study.day, user.index, pch = 20,
                 col = rev(grey.colors(length(ema1)))[hectic],
                 frame.plot = FALSE, xlab = "Study day", ylab = "User index"))
@

\subsection{Stress}

At each EMA, the user was asked ``How stressful was your day today?'' A $\Sexpr{length(ema2)}$-point scale was provided, with $\Sexpr{ema1[1]}$ labelled as ``\Sexpr{names(ema2[1])}'' and $\Sexpr{rev(ema1)[1]}$ labelled as ``\Sexpr{names(rev(ema2)[1])}.'' Here we depict the responses over time, where darker points correspond to more stressful days. No point is plotted if the response is unavailable, due to either non- or pending response.
<<ema2, fig.height=3>>=
with(daily, plot(study.day, user.index, pch = 20,
                 col = rev(grey.colors(length(ema2)))[stressful],
                 frame.plot = FALSE, xlab = "Study day", ylab = "User index"))
@

\subsection{Typicalness for the day of the week}

At each EMA, the user was asked ``How typical was today for a X?'', where ``X'' was displayed as the current day of the week. A $\Sexpr{length(ema3)}$-point scale was provided, with $\Sexpr{ema1[1]}$ labelled as ``\Sexpr{names(ema3[1])}'' and $\Sexpr{rev(ema1)[1]}$ labelled as ``\Sexpr{names(rev(ema3)[1])}.''  Here we depict the responses over time, where darker points correspond to more atypical days. No point is plotted if the response is unavailable, due to either non- or pending response. 
<<ema3, fig.height=3>>=
with(daily, plot(study.day, user.index, pch = 20,
                 col = grey.colors(length(ema3))[typical],
                 frame.plot = FALSE, xlab = "Study day", ylab = "User index"))
@

\section{Daily step count}

The following plots depict the daily step count for each user, with the solid series corresponds to Jawbone and dotted to Google Fit. Breaks coincide with one or more days on which no step counts were recorded that day. The \Sexpr{color.name} segments indicate that planning was carried out the day before. The horizontal reference line gives the user average daily Jawbone step count and extends up to the known or projected exit date. Vertical lines correspond to days on which no part of the EMA was completed, with the dotted line type used for an inactive connection at the EMA notification slot.
<<dailysteps, fig.height=2>>=
daily$last.jbsteps <- with(daily, delay(user, study.day, jbsteps))
daily$next.jbsteps <- with(daily, delay(user, study.day, jbsteps, -1))
daily$seg.jbsteps <- with(daily, !is.na(jbsteps) & !is.na(next.jbsteps))
daily$last.gfsteps <- with(daily, delay(user, study.day, gfsteps))
daily$next.gfsteps <- with(daily, delay(user, study.day, gfsteps, -1))
daily$seg.gfsteps <- with(daily, !is.na(gfsteps) & !is.na(next.gfsteps))
daily$plan <- daily$planning %in% c("structured", "unstructured")
plot.daily.steps <- function(u) {
  d <- subset(daily, user == u)
  maxs <- max(1, d$jbsteps, d$gfsteps, na.rm = TRUE)
  maxd <- max(d$study.day)
  slwd <- 2
  plot(NULL, xlim = c(0, max(maxd, max.day)), ylim = c(0, maxs),
       xlab = "", ylab = "", main = "", axes = FALSE, frame.plot = FALSE)
  mtext(paste(u), 2, line = 2.75)
  apply(subset(d, is.na(ema.set.length) & study.day < maxd,
               select = c(study.day, connect)), 1,
        function(x) abline(v = x[1], col = "lightgrey",
                           lty = c("dotted", "solid")[x[2] + 1]))
  meanjb <- mean(d$jbsteps, na.rm = TRUE)
  segments(0, meanjb, max(maxd, max.day * (d$last.date[1] > max.date)),
           meanjb, col = "lightgrey")
  with(subset(d, !plan & seg.gfsteps),
       segments(study.day, gfsteps, study.day + 1, next.gfsteps,
                lty = "dotted", lwd = slwd))
  with(subset(d, plan & seg.gfsteps),
       segments(study.day, gfsteps, study.day + 1, next.gfsteps,
                lty = "dotted", col = color, lwd = slwd))
  with(subset(d, !plan & seg.jbsteps),
       segments(study.day, jbsteps, study.day + 1, next.jbsteps, lwd = slwd))
  with(subset(d, plan & seg.jbsteps),
       segments(study.day, jbsteps, study.day + 1, next.jbsteps,
                col = color, lwd = slwd))
  at <- with(d, c(0, study.day[is.na(jbsteps) & !is.na(last.jbsteps)] - 1,
                  study.day[!is.na(jbsteps) & is.na(last.jbsteps)], maxd,
                  max.day))
  axis(1, at = sort(unique(at)))
  axis(2, at = round(c(0, meanjb, maxs)))
}
invisible(sapply(with(subset(daily, !is.na(jbsteps)), unique(user)),
                 plot.daily.steps))
@

\section{Step count following decision points}

The following plots depict, for each user, the cumulative step count one hour following every decision point. Large gaps in this plot coincide with periods where no step counts were recorded. Counts immediately following a decision to send an activity suggestion are displayed in \Sexpr{color.name}. The dotted line type indicates that the user was unavailable or disconnected at the preceding decision point. The horizontal reference line gives the average cumulative steps over every decision point, regardless of connection or availability, and extends to the known or projected exit date.
<<slotsteps, fig.height=2>>=
plot.slot.steps <- function(u, d, by = 15, mins = 60) {
  d <- subset(d, user == u & (end.utime - decision.utime) < mins * 60)
  d$sum.steps <- with(d, roll(index, end.utime, steps, FUN = sum, na.rm = TRUE))
  d <- subset(d, !is.na(sum.steps))
  d$max.steps <- with(d, roll(index, end.utime, sum.steps, FUN = max))
  slwd <- 2
  minu <- min(d$end.utime)
  maxu <- max(d$end.utime, minu + max.day * 24 * 60^2)
  means <- mean(d$sum.steps)
  maxs <- max(d$max.steps)
  with(subset(d, !is.na(sum.steps)),
       plot(NULL, xlim = c(minu, maxu),
               ylim = c(0, maxs), xlab = "", ylab = "", main = "",
               axes = FALSE, frame.plot = FALSE))
  mtext(paste(u), 2, line = 2.75)
  segments(0, means,
           max(maxu, max.day * 24 * 60^2 * (d$last.date[1] > max.date)), means,
           col = "lightgrey")
  with(d, sapply(index,
                 function(j)
                   with(subset(d, index == j)[c(seq(1, sum(index == j), by = by),
                                                sum(index == j)), ],
                        points(end.utime, sum.steps, type = "s", lwd = slwd,
                               col = c("black", color)[send[1] + 1],
                               lty = c("dotted", "solid")[avail[1] + 1]))))
  axis(1, at = c(minu, maxu), labels = format(c(minu, maxu), "%d %b"))
  axis(2, at = round(c(0, means, maxs)))
}
invisible(sapply(unique(jbslot$user), function(u) plot.slot.steps(u, jbslot)))
@

\end{document}
